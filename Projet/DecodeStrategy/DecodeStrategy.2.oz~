      % La fonction qui decode la strategie d'un serpent en une liste de fonctions. Chacune correspond
      % a un instant du jeu et applique l'instruction devant etre executee a cet instant au snake
      % passe en argument
      %
      % strategy ::= <instruction> '|' <strategy>
      %            | repeat(<strategy> times:<integer>) '|' <strategy>
      %            | nil
      fun{DecodeStrategy Strategy}
	 local
	    proc{DecodeStrategy2 Strategy}
	       case Strategy of H|T then
		  if H == forward orelse H == turn(left) orelse H == turn(right) then
		     CellList := {ListNext H @CellList}
		     {DecodeStrategy2 T}
		  else
		     {DecodeRepeat H}
		     {DecodeStrategy2 T}
		  end
	       else skip
	       end
	    end
	 in
	    {DecodeStrategy2 Strategy}
	    @CellList
	 end
      end
      
      %Procedure qui decode les instructions de type : repeat([turn(right)] times:2)
      %et change ainsi la liste contenue dans la cell : CellList
      proc{DecodeRepeat X}
	 local Inst Times in
	    Inst = X.1
	    Times = X.times
	    for E in 1..Times do
	       CellList := {ListNext Inst @CellList}
	    end
	 end
      end
      
      %Fonction qui rajoute a la fin de la liste L la fonction d'appel a Next
      %Avec l'instruction donnee en X
      fun{ListNext X L}
	 case L of H|T then H|{ListNext X T}
	 [] nil then
	    fun{$ Snake}{Next Snake X}end|nil
	 end
      end
